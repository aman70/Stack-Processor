#include <stdio.h>
#include "platform.h"
#include "xparameters.h"
#include "factorial_ip.h"
#include "xil_io.h"
#include "xil_types.h"
//-------------------------------------------------------------------
// Registers/Ports Mapping
// =======================
// run=>slv_reg0(0),reset=>slv_reg0(1),bus2mem_en=>slv_reg0(2),bus2mem_we=>slv_reg0(3),
// bus2mem_addr=>slv_reg1(9 downto 0),
// bus2mem_data_in=>slv_reg2,
// mem2bus_data_out=>slv_reg3,
// done=>slv_reg4(0)
//-------------------------------------------------------------------

int main()
{
	unsigned int addr = 0;
    init_platform();
    //-----------------------------------------------------------------
    // slv_reg0 write = reset + bus2mem_en + bus2mem_we = 2+4+8 = 0xE
    //-----------------------------------------------------------------
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 0, 0x0000000E);
    //-----------------------------------------------------------------
    // Lower Reset: slv_reg0 write = bus2mem_en + bus2mem_we = 4+8 = 0xC
    //-----------------------------------------------------------------
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 0, 0x0000000C);
    //-----------------------------------------
    // loading user code
    //-----------------------------------------


//----------------------------------------------------------
// Test 5 factorial recursive process
// # Factorial
// #int fact(int n) {
// #if (n==0) return 1;
// #else return n*fact(n-1);
// #}
// #fact:
// #sc 0 slaa sl sc 0 scmp sc small sjeq  // if n==0
// #sc 0 slaa sl	// stack n
// #sc 0 slaa sl sc 1 ssub sc 1 sc fact scall// fact(n-1)
// #smul		// multiply
// #srtn		// return the multiplication

// #small:
// #sc 1 srtn	// return 1;

// # sc=1 sl=11h=17 ss=21h=33 sadd=31h=49 sjeq=71h=113 scmp=F1h=241
// # scall=81h=129 srtn=91h=145 salloc=A1h=161 slaa=C1h=193
// # slla=bh=209 sjmp=E1h=225 sjeq=71h=113 ssub=41h=65
//--------------------------------------------------------------------
// # fact is at Location 0x14=20  small is at location 0x3C=60
// #14 15 16   17 18 19 1A   1B 1C    1D
// #20 21 22   23 24 25 26   27 28    29
// #sc 0  slaa sl sc 0  scmp sc small sjeq  // if n==0
// #1  0  b   11 1  0  F1   1  3C    71
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 20);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 21);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x0);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 22);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xb);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 23);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x11);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 24);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 25);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x0);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 26);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xF1);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 27);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 28);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x3C);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 29);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x71);
	
// #30 31 32   33
// #1E 1F 20   21
// #sc 0  slaa sl	// stack n
// #1  0  b   11
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 30);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 31);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x0);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 32);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xb);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 33);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x11);
	
// #34 35 36 37 38   39 40   41 42 43 44   45
// #22 23 24 25 26   27 28   29 2A 2B 2C   2D
// #sc 1  sc 0  slaa sl ssub sc 1  sc fact scall// fact(n-1)
// #1  1  1  0  b   11 41   1  1  1  14   81
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 34);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 35);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 36);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 37);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x0);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 38);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xb);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 39);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x11);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 40);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x41);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 41);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 42);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 43);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 44);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x14);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 45);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xE6);
// #46   47
// #2E   2F
// #smul srtn		// multiply  return
// #101  91
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 46);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x101);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 47);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xF9);

// #small: at location 0x3C
// #60 61  62
// #3C 3D  3E
// #sc 1   srtn	// return 1;
// #1  1   91
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 60);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 61);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 62);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xF9);

// #main{fact(12);}
// #main is at address 0 sc arg, sc #of_arg, sc addr
// #0  1 2  3 4  5    6     7
// #sc 1 sc 1 sc fact scall shalt
// #1  C 1  1 1  14   81    FF
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 0);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xC);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 2);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 3);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 4);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x1);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 5);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0x14);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 6);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xE6);
	
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, 7);
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 8, 0xFF);
//--------------- END USER CODE ----------------------------

//----------------------- RUN ------------------------------
    //----------------------------------------
    // Lower bus2mem_en, bus2mem_we and run = slv_reg(0) = 0x1
    //----------------------------------------
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 0, 0x00000001);
    //----------------------------------------
    // wait on done flag slv_reg4(0)
    //----------------------------------------
    while ((unsigned int)
    (FACTORIAL_IP_mReadReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR,16)&0x00000001)==0);

//-------------------- READ RESULTS ------------------------------
    // enable bus2mem_en: slv_reg(2) = 0x4 run and bus2mem_we = 0
	FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 0, 0x00000004);
//----------------------------------------------------------------
    // Read Result Test 5 factorial returns at 128

    addr = 128;
    FACTORIAL_IP_mWriteReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR, 4, addr);
	xil_printf("content of %d : %d\n\r", addr, (unsigned int)
			   FACTORIAL_IP_mReadReg(XPAR_FACTORIAL_IP_0_S_AXI_BASEADDR,12));
    return 0;
}